{"pageProps":{"post":{"attributes":{},"html":"<h1 id=\"day-1-tree-dfs-bfs\">Day 1: Tree DFS, BFS</h1>\n<p>Study Patterns Tree Depth First Search and Tree Breadth First Search from <a href=\"https://www.designgurus.io/course-play/grokking-the-coding-interview\">https://www.designgurus.io/course-play/grokking-the-coding-interview</a></p>\n<h2 id=\"binary-tree-node\">Binary Tree Node</h2>\n<pre><code class=\"hljs language-golang\"><span class=\"hljs-keyword\">type</span> TreeNode <span class=\"hljs-keyword\">struct</span> {\n    val <span class=\"hljs-type\">int</span>\n    left *TreeNode\n    right *TreeNode\n}\n\n<span class=\"hljs-comment\">// Create Node with 1 element</span>\nroot := &amp;TreeNode{val: <span class=\"hljs-number\">3</span>, left: <span class=\"hljs-literal\">nil</span>, right: <span class=\"hljs-literal\">nil</span>}\n</code></pre>\n<h2 id=\"binary-tree-dfs-recursive\">Binary tree: DFS (recursive)</h2>\n<pre><code class=\"hljs language-golang\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">dfs</span><span class=\"hljs-params\">(root *TreeNode)</span></span> <span class=\"hljs-type\">int</span> {\n    <span class=\"hljs-keyword\">if</span> root == <span class=\"hljs-literal\">nil</span> {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\n    }\n\n    ans := <span class=\"hljs-number\">0</span>\n\n    <span class=\"hljs-comment\">// do logic</span>\n    ans += dfs(root.left)\n    ans += dfs(root.right)\n    <span class=\"hljs-keyword\">return</span> ans\n}\n</code></pre>\n<h2 id=\"binary-tree-dfs-iterative\">Binary tree: DFS (iterative)</h2>\n<pre><code class=\"hljs language-golang\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">dfs</span><span class=\"hljs-params\">(root *TreeNode)</span></span> <span class=\"hljs-type\">int</span> {\n    <span class=\"hljs-keyword\">if</span> root == <span class=\"hljs-literal\">nil</span> {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\n    }\n\n    stack := []*TreeNode{root}\n    ans := <span class=\"hljs-number\">0</span>\n\n    <span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">len</span>(stack) &gt; <span class=\"hljs-number\">0</span> {\n        node := stack[<span class=\"hljs-built_in\">len</span>(stack)<span class=\"hljs-number\">-1</span>]\n        stack = stack[:<span class=\"hljs-built_in\">len</span>(stack)<span class=\"hljs-number\">-1</span>]\n        <span class=\"hljs-comment\">// do logic</span>\n        <span class=\"hljs-keyword\">if</span> node.left != <span class=\"hljs-literal\">nil</span> {\n            stack = <span class=\"hljs-built_in\">append</span>(stack, node.left)\n        }\n        <span class=\"hljs-keyword\">if</span> node.right != <span class=\"hljs-literal\">nil</span> {\n            stack = <span class=\"hljs-built_in\">append</span>(stack, node.right)\n        }\n    }\n\n    <span class=\"hljs-keyword\">return</span> ans\n}\n</code></pre>\n<h2 id=\"binary-tree-bfs\">Binary tree: BFS</h2>\n<pre><code class=\"hljs language-golang\"><span class=\"hljs-keyword\">package</span> main\n\n<span class=\"hljs-keyword\">import</span> (\n    <span class=\"hljs-string\">&quot;container/list&quot;</span>\n)\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">fn</span><span class=\"hljs-params\">(root *TreeNode)</span></span> <span class=\"hljs-type\">int</span> {\n    queue := list.New()\n    queue.PushBack(root)\n    ans := <span class=\"hljs-number\">0</span>\n\n    <span class=\"hljs-keyword\">for</span> queue.Len() &gt; <span class=\"hljs-number\">0</span> {\n        current_length := queue.Len()\n        <span class=\"hljs-comment\">// do logic for current level</span>\n\n        <span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; current_length; i++ {\n            node := queue.Remove(queue.Front()).(*TreeNode)\n            <span class=\"hljs-comment\">// do logic</span>\n            <span class=\"hljs-keyword\">if</span> node.left != <span class=\"hljs-literal\">nil</span> {\n                queue.PushBack(node.left)\n            }\n            <span class=\"hljs-keyword\">if</span> node.right != <span class=\"hljs-literal\">nil</span> {\n                queue.PushBack(node.right)\n            }\n        }\n    }\n\n    <span class=\"hljs-keyword\">return</span> ans\n}\n<span class=\"hljs-comment\">/**\nNote that in the Go code, we used a linked list from the container package \nas a queue since Go does not have a built-in queue data structure. \nWe also used the list.Len() method to get the length of the queue instead of the len() function.\n**/</span>\n</code></pre>\n<h2 id=\"resources\">Resources</h2>\n<ul>\n<li>Estimated completion time: 4.5-9 hours </li>\n<li><a href=\"https://leetcode.com/explore/interview/card/leetcodes-interview-crash-course-data-structures-and-algorithms/707/traversals-trees-graphs/\">https://leetcode.com/explore/interview/card/leetcodes-interview-crash-course-data-structures-and-algorithms/707/traversals-trees-graphs/</a></li>\n<li>Code Templates: <a href=\"https://leetcode.com/explore/interview/card/cheatsheets/720/resources/4723/\">https://leetcode.com/explore/interview/card/cheatsheets/720/resources/4723/</a> </li>\n<li><a href=\"https://github.com/TSiege/Tech-Interview-Cheat-Sheet#binary-tree\">https://github.com/TSiege/Tech-Interview-Cheat-Sheet#binary-tree</a></li>\n</ul>\n","slug":"day-1","title":"Day 1","section":"Week 1","icon":"dumpster-fire","filePath":"/home/runner/work/spaced-grokking-course/spaced-grokking-course/lessons/03-week-1/A-day-1.md","nextSlug":"/spaced-grokking-course/lessons/week-1/day-2","prevSlug":"/spaced-grokking-course/lessons/cheat-sheets/Cheat-sheets"}},"__N_SSG":true}